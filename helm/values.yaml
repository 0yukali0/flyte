
# ---------------------------------------------------------------------
# Core System settings
# This section consists of Core components of Flyte and their deployment
# settings. This includes FlyteAdmin service, Datacatalog, FlytePropeller and
# Flyteconsole
# ---------------------------------------------------------------------

#
# FLYTEADMIN SETTINGS
#

flyteadmin:
  # -- Replicas count for Flyteadmin deployment
  replicaCount: 1
  image:
    # -- Docker image for Flyteadmin deployment
    repository: ghcr.io/flyteorg/flyteadmin
    tag: v0.4.0
    pullPolicy: IfNotPresent
  # -- Default resources requests and limits for Flyteadmin deployment
  resources:
    limits:
      cpu: 250m
      ephemeral-storage: 100Mi
      memory: 500Mi
    requests:
      cpu: 10m
      ephemeral-storage: 50Mi
      memory: 50Mi
  # -- Default regex string for searching configuration files
  configPath: /etc/flyte/config/*.yaml
  # -- Service settings for Flyteadmin
  service:
    annotations:
      projectcontour.io/upstream-protocol.h2c: grpc
      alb.ingress.kubernetes.io/backend-protocol-version: GRPC
    type: ClusterIP
    loadBalancerSourceRanges: []
  # -- Annotations for ServiceAccount attached to Flyteadmin pods
  serviceAccountAnnotations: {}
  # -- Annotations for Flyteadmin pods
  podAnnotations: {}
  # -- nodeSelector for Flyteadmin deployment
  nodeSelector: {}
  # -- tolerations for Flyteadmin deployment
  tolerations: []
  # -- affinity for Flyteadmin deployment
  affinity: {}

#
# DATACATALOG SETTINGS
#

datacatalog:
  # -- Replicas count for Datacatalog deployment
  replicaCount: 1
  image:
    # -- Docker image for Datacatalog deployment
    repository: ghcr.io/flyteorg/datacatalog
    tag: v0.3.0
    pullPolicy: IfNotPresent
  # -- Default resources requests and limits for Datacatalog deployment
  resources:
    limits:
      cpu: 500m
      ephemeral-storage: 100Mi
      memory: 500Mi
    requests:
      cpu: 10m
      ephemeral-storage: 50Mi
      memory: 50Mi
  # -- Default regex string for searching configuration files
  configPath: /etc/datacatalog/config/*.yaml
  # -- Service settings for Datacatalog
  service:
    annotations:
      projectcontour.io/upstream-protocol.h2c: grpc
      alb.ingress.kubernetes.io/backend-protocol-version: GRPC
    type: NodePort
  # -- Annotations for ServiceAccount attached to Datacatalog pods
  serviceAccountAnnotations: {}
  # -- Annotations for Datacatalog pods
  podAnnotations: {}
  # -- nodeSelector for Datacatalog deployment
  nodeSelector: {}
  # -- tolerations for Datacatalog deployment
  tolerations: []
  # -- affinity for Datacatalog deployment
  affinity: {}

#
# FLYTEPROPELLER SETTINGS
#

flytepropeller:
  # -- Replicas count for Flytepropeller deployment
  replicaCount: 1
  image:
    # -- Docker image for Flytepropeller deployment
    repository: ghcr.io/flyteorg/flytepropeller
    tag: v0.7.8
    pullPolicy: IfNotPresent
  # -- Default resources requests and limits for Flytepropeller deployment
  resources:
    limits:
      cpu: 200m
      ephemeral-storage: 100Mi
      memory: 200Mi
    requests:
      cpu: 10m
      ephemeral-storage: 50Mi
      memory: 50Mi
  cacheSizeMbs: 0
  # -- Default regex string for searching configuration files
  configPath: /etc/flyte/config/*.yaml
  # -- Annotations for ServiceAccount attached to Flytepropeller pods
  serviceAccountAnnotations: {}
  # -- Annotations for Flytepropeller pods
  podAnnotations: {}
  # -- nodeSelector for Flytepropeller deployment
  nodeSelector: {}
  # -- tolerations for Flytepropeller deployment
  tolerations: []
  # -- affinity for Flytepropeller deployment
  affinity: {}

#
# FLYTECONSOLE SETTINGS
#

flyteconsole:
  # -- Replicas count for Flyteconsole deployment
  replicaCount: 1
  image:
    # -- Docker image for Flyteconsole deployment
    repository: ghcr.io/flyteorg/flyteconsole
    tag: v0.19.6
    pullPolicy: IfNotPresent
  # -- Default resources requests and limits for Flyteconsole deployment
  resources:
    limits:
      cpu: 500m
      memory: 250Mi
    requests:
      cpu: 10m
      memory: 50Mi
  # -- Service settings for Flyteconsole
  service:
    annotations: {}
    type: ClusterIP
  # -- Annotations for Flyteconsole pods
  podAnnotations: {}
  # -- nodeSelector for Flyteconsole deployment
  nodeSelector: {}
  # -- tolerations for Flyteconsole deployment
  tolerations: []
  # -- affinity for Flyteconsole deployment
  affinity: {}


# ----------------------------------------------
# Sandbox Configuration
# Sandbox allows to run flyte without any cloud dependencies and can be run even locally on your laptop.
# This is achieved by replacing cloud service dependencies by k8s local alternatives. These may not be ideal
# for a high performance setup, but are great to try out flyte
# -----------------------------------------------
#
# REDIS SETTINGS
#

redis:
  # --- enable or disable Redis Statefulset installation
  enabled: true
  # -- Replicas count for Redis Statefulset
  replicaCount: 1
  image:
      # -- Docker image for Redis Statefulset
    repository: docker.io/bitnami/redis
    tag: 4.0.2-r1
    pullPolicy: IfNotPresent
  # -- Default resources requests and limits for Redis Statefulset
  resources:
    requests:
      cpu: 10m
      memory: 50Mi
    limits:
      cpu: 1000m
      memory: 1Gi
  # -- Service settings for Redis
  service:
    annotations: {}
    type: ClusterIP
  # -- Annotations for Redis pods
  podAnnotations: {}
  # -- nodeSelector for Redis Statefulset
  nodeSelector: {}
  # -- tolerations for Redis Statefulset
  tolerations: []
  # -- affinity for Redis Statefulset
  affinity: {}

#
# POSTGRES SETTINGS
#

postgres:
  # --- enable or disable Postgres deployment installation
  enabled: true
  # -- Replicas count for Postgres deployment
  replicaCount: 1
  image:
    # -- Docker image for Postgres deployment
    repository: postgres
    tag: "10.16"
    pullPolicy: IfNotPresent
  # -- Default resources requests and limits for Postgres deployment
  resources:
    requests:
      cpu: 10m
      memory: 128Mi
    limits:
      cpu: 1000m
      memory: 512Mi
  # -- Service settings for Postgres
  service:
    annotations: {}
    type: ClusterIP
  # -- Annotations for Postgres pods
  podAnnotations: {}
  # -- nodeSelector for Postgres deployment
  nodeSelector: {}
  # -- tolerations for Postgres deployment
  tolerations: []
  # -- affinity for Postgres deployment
  affinity: {}

#
# MINIO SETTINGS
#

minio:
  # --- enable or disable Minio deployment installation
  enabled: true
  # -- Replicas count for Minio deployment
  replicaCount: 1
  image:
    # -- Docker image for Minio deployment
    repository: minio/minio
    tag: RELEASE.2020-12-16T05-05-17Z
    pullPolicy: IfNotPresent
  # -- Default resources requests and limits for Minio deployment
  resources:
    requests:
      cpu: 10m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 512Mi
  # -- Service settings for Minio
  service:
    annotations: {}
    type: ClusterIP
  # -- Annotations for Minio pods
  podAnnotations: {}
  # -- nodeSelector for Minio deployment
  nodeSelector: {}
  # -- tolerations for Minio deployment
  tolerations: []
  # -- affinity for Minio deployment
  affinity: {}

#
# CONTOUR SETTINGS
#

contour:
  # --- enable or disable Contour deployment installation
  enabled: true
  # -- Replicas count for Contour deployment
  replicaCount: 1
  contour:
    # -- Default resources requests and limits for Contour
    resources:
      requests:
        cpu: 10m
        memory: 50Mi
      limits:
        cpu: 100m
        memory: 100Mi
  envoy:
    # -- Default resources requests and limits for Envoy
    resources:
      requests:
        cpu: 10m
        memory: 50Mi
      limits:
        cpu: 100m
        memory: 100Mi
  # -- Annotations for ServiceAccount attached to Contour pods
  serviceAccountAnnotations: {}
  # -- Annotations for Contour pods
  podAnnotations: {}
  # -- nodeSelector for Contour deployment
  nodeSelector: {}
  # -- tolerations for Contour deployment
  tolerations: []
  # -- affinity for Contour deployment
  affinity: {}


#
# KUBERNETES DASHBOARD
#

kubernetes-dashboard:
  enabled: false

# ------------------------------------------------
#
# COMMON SETTINGS
#

common:
  databaseSecret:
    # -- Specify name of K8s Secret which contains Database password. Leave it empty if you don't need this Secret 
    name: ""
    # -- Specify your Secret (with sensitive data) or pseudo-manifest (without sensitive data). See https://github.com/godaddy/kubernetes-external-secrets
    secretManifest: {}
  ingress:
    # --- Enable or disable creating Ingress for Flyte. Relevant to disable when using e.g. Istio as ingress controller.
    enabled: true
    # --- Enable or disable HMR route to flyteconsole. This is useful only for frontend development.
    webpackHMR: false
    # --- separateGrpcIngress puts GRPC routes into a separate ingress if true. Required for certain ingress controllers like nginx.
    separateGrpcIngress: false
    # --- Extra Ingress annotations applied only to the GRPC ingress. Only makes sense if `separateGrpcIngress` is enabled.
    separateGrpcIngressAnnotations:
      nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
    # --- Ingress annotations applied to both HTTP and GRPC ingresses.
    annotations: {}
    # --- albSSLRedirect adds a special route for ssl redirect. Only useful in combination with the AWS LoadBalancer Controller.
    albSSLRedirect: false
    # --- Ingress hostname
    # host:
    tls:
      enabled: true
  flyteNamespaceTemplate:
    # --- Enable or disable creating Flyte namespace in template. Enable when using helm as template-engine only. Disable when using `helm install ...`.
    enabled: false


# -----------------------------------------------------
# Core dependencies that should be configured for Flyte to work on any platform
# Specifically 2 - Storage (s3, gcs etc), Production RDBMS - Aurora, CloudSQL etc
# ------------------------------------------------------
#
# STORAGE SETTINGS
#

storage:
  # -- Sets the storage type. Supported values are sandbox, s3, gcs and custom.
  type: sandbox
  # -- bucketName defines the storage bucket flyte will use. Required for all types except for sandbox.
  # bucketName: my-s3-bucket
  # -- settings for storage type s3
  s3:
    region: us-east-1
  # -- settings for storage type gcs
  gcs:
    # -- GCP project ID. Required for storage type gcs.
    # projectId:
  # -- Settings for storage type custom. See https://github:com/graymeta/stow for supported storage providers/settings.
  custom: {}

# Database configuration
db:
  database: {}
    # port: 5432
    # username: postgres
    # host: postgres
    # dbname: flyte
    # passwordPath: /etc/db/pass.txt



# --------------------------------------------------------------------
# Specializing your deployment using configuration
# -------------------------------------------------------------------
#
# CONFIGMAPS SETTINGS
#

configmap:
  # Configmap for Flyte console UI
  console:
    BASE_URL: /console
    CONFIG_DIR: /etc/flyte/config

  # Domains configuration for Flyte projects
  domain:
    domains:
    - id: development
      name: development
    - id: staging
      name: staging
    - id: production
      name: production

  # -- Flyteadmin server config
  server:
    server:
      httpPort: 8088
      grpcPort: 8089
      security:
        secure: false
        useAuth: false
        allowCors: true
    flyteadmin:
      roleNameKey: "iam.amazonaws.com/role"
      profilerPort: 10254
      metricsScope: "flyte:"
      metadataStoragePrefix:
        - "metadata"
        - "admin"
      eventVersion: 1
      testing:
        host: http://flyteadmin
  
  # Datacatalog server config
  datacatalogServer:
    datacatalog:
      storage-prefix: metadata/datacatalog
      metrics-scope: datacatalog
      profiler-port: 10254
    application:
      grpcPort: 8089
      httpPort: 8080
      grpcServerReflection: true

  # Task default resources configuration
  task_resource_defaults:
    # -- Task default resources parameters
    task_resources:
      defaults:
        cpu: 100m
        memory: 100Mi
        storage: 5Mi
      limits:
        cpu: 2
        memory: 8Gi
        storage: 20Mi
        gpu: 1

  # Admin configuration
  admin:
    event:
      type: admin
      rate: 500
      capacity: 1000
    admin:
      endpoint: flyteadmin:81
      insecure: true

  # Catalog configuration
  catalog:
    catalog-cache:
      endpoint: datacatalog:89
      type: datacatalog
      insecure: true

  # Copilot configuration
  copilot:
    plugins:
      k8s:
        co-pilot:
          name: flyte-copilot-
          image: ghcr.io/lyft/flyteplugins/flytecopilot:dc4bdbd61cac88a39a5ff43e40f026bdbc2c78a2
          start-timeout: 30s

  # Core propeller configuration
  core:
    propeller:
      rawoutput-prefix: s3://my-s3-bucket/
      workers: 20
      max-workflow-retries: 30

  # Plugins configuration
  enabled_plugins:
    tasks:
      task-plugins:
        enabled-plugins: []

  # Kubernetes plugin configuration
  k8s:
    plugins:
      k8s:
        default-env-vars: []
        # - DEFAULT_ENV_VAR: VALUE

        default-cpus: 100m
        default-memory: 100Mi

  # Logger configuration
  logger:
    logger:
      show-source: true
      level: 4

  # Resource manager configuration
  resource_manager:
    # -- resource manager configuration
    propeller:
      resourcemanager:
        type: redis
        resourceMaxQuota: 10000
        redis:
          hostPath: redis-resource-manager:6379
          hostKey: mypassword

  # Tasks logs plugin configuration
  task_logs:
    plugins:
      logs:
        kubernetes-enabled: false

# ----------------------------------------------------------------
# Optional Modules
# Flyte built extensions that enable various additional features in Flyte.
# All these features are optional, but are critical to run certain features
# ------------------------------------------------------------------------

# --
# Flyte uses a cloud hosted Cron scheduler to run workflows on a schedule. The following module is optional. Without,
# this module, you will not have scheduled launchplans/workflows.
workflow_scheduler:
  enabled: false
  config:
    scheduler:
      eventScheduler:
        scheme: aws
        region: us-east-1
        scheduleRole: arn:aws:iam::<ACCOUNT-NUMBER>:role/flyte_cron_scheduler_role
        targetName: arn:aws:sqs:us-east-1:<ACCOUNT-NUMBER>:flyte-cron-scheduler-queue
        scheduleNamePrefix: flyte
      workflowExecutor:
        scheme: aws
        region: us-east-1
        scheduleQueueName: flyte-cron-scheduler-queue
        accountId: <ACCOUNT-NUMBER>
        reconnectAttempts: 10
        reconnectDelaySeconds: 30


# --
# Workflow notifications module is an optional dependency. Flyte uses cloud native pub-sub systems to notify users of
# various events in their workflows
workflow_notifications:
    enabled: false
    config:
       notifications:
         type: aws
         region: us-east-1
         publisher:
           topicName: arn:aws:sns:us-east-1:<ACCOUNT-NUMBER>:flyte-notifications-topic
         processor:
           queueName: flyte-notifications-queue
           accountId: <ACCOUNT-NUMBER>
         emailer:
           subject: "Flyte: {{ project }}/{{ domain }}/{{ launch_plan.name }} has '{{ phase }}'"
           sender:  "flyte@example.com"
           body: |
             Execution {{ workflow.project }}/{{ workflow.domain }}/{{ workflow.name }}/{{ name }} has {{ phase }}.
             Details: https://flyte.example.com/console/projects/{{ project }}/domains/{{ domain }}/executions/{{ name }}.
             {{ error }}


# -- Configuration for the Cluster resource manager component. This is an optional component, that enables automatic
# cluster configuration. This is useful to set default quotas, manage namespaces etc that map to a project/domain
cluster_resource_manager:
  # -- Enables the Cluster resource manager component
  enabled: true
  # Configmap for ClusterResource parameters
  config:
    # -- ClusterResource parameters
    cluster_resources:
      templatePath: "/etc/flyte/clusterresource/templates"
      customData:
        production:
          - projectQuotaCpu:
              value: "5"
          - projectQuotaMemory:
              value: "4000Mi"
        staging:
          - projectQuotaCpu:
              value: "2"
          - projectQuotaMemory:
              value: "3000Mi"
        development:
          - projectQuotaCpu:
              value: "4"
          - projectQuotaMemory:
              value: "3000Mi"
      refresh: 5m

  # -- Resource templates that should be applied
  templates:
    # -- Template for namespaces resources
    - key: aa_namespace
      value: |
        apiVersion: v1
        kind: Namespace
        metadata:
          name: {{ namespace }}
        spec:
          finalizers:
          - kubernetes

    - key: ab_project_resource_quota
      value: |
        apiVersion: v1
            kind: ResourceQuota
            metadata:
              name: project-quota
              namespace: {{ namespace }}
            spec:
              hard:
                limits.cpu: {{ projectQuotaCpu }}
                limits.memory: {{ projectQuotaMemory }}

    # -- Template for spark role
    - key: ac_project_copilot_dataconfig
      value: |
        kind: ConfigMap
            apiVersion: v1
            metadata:
              name: flyte-data-config
              namespace: {{ namespace }}
            data:
              config.yaml: |
                storage:
                  connection:
                    access-key: minio
                    auth-type: accesskey
                    disable-ssl: true
                    endpoint: http://minio.flyte.svc.cluster.local:9000
                    region: us-east-1
                    secret-key: miniostorage
                  type: minio
                  container: my-s3-bucket
                  enable-multicontainer: true


# --------------------------------------------------------
# Optional Plugins
# --------------------------------------------------------

#
# SPARK Plugin using the Spark Operator
#

sparkoperator:
  # --- enable or disable Sparkoperator deployment installation
  enabled: true
  # -- Replicas count for Sparkoperator deployment
  replicaCount: 1
  image:
    # -- Docker image for Sparkoperator
    tag: v1beta2-1.2.0-3.0.0 # Set to v1beta2-1.1.2-2.4.5 for Spark 2
  # -- Default resources requests and limits for Sparkoperator
  resources:
    limits:
      cpu: 1000m
      memory: 500M
    requests:
      cpu: 10m
      memory: 50M

  # Spark plugin configuration
  plugin_config:
    plugins:
      spark:
        # -- Spark default configuration
        spark-config-default:
          - spark.hadoop.mapreduce.fileoutputcommitter.algorithm.version: "2"
          - spark.kubernetes.allocation.batch.size: "50"
          - spark.hadoop.fs.s3a.acl.default: "BucketOwnerFullControl"
          - spark.hadoop.fs.s3n.impl: "org.apache.hadoop.fs.s3a.S3AFileSystem"
          - spark.hadoop.fs.AbstractFileSystem.s3n.impl: "org.apache.hadoop.fs.s3a.S3A"
          - spark.hadoop.fs.s3.impl: "org.apache.hadoop.fs.s3a.S3AFileSystem"
          - spark.hadoop.fs.AbstractFileSystem.s3.impl: "org.apache.hadoop.fs.s3a.S3A"
          - spark.hadoop.fs.s3a.impl: "org.apache.hadoop.fs.s3a.S3AFileSystem"
          - spark.hadoop.fs.AbstractFileSystem.s3a.impl: "org.apache.hadoop.fs.s3a.S3A"
          - spark.hadoop.fs.s3a.multipart.threshold: "536870912"
          - spark.blacklist.enabled: "true"
          - spark.blacklist.timeout: "5m"
          - spark.task.maxfailures: "8"


# ----------------------
# Distributed Pytorch execution using the K8s Pytorch operator
#

pytorchoperator:
  # --- enable or disable Pytorchoperator deployment installation
  enabled: true   # Set false to disable
  # -- Replicas count for Pytorchoperator deployment
  replicaCount: 1
  image:
    # -- Docker image for Pytorchoperator
    repository: gcr.io/kubeflow-images-public/pytorch-operator
    tag: v1.0.0-g047cf0f
    pullPolicy: IfNotPresent
  # -- Default resources requests and limits for Pytorchoperator
  resources:
    limits:
      cpu: 500m
      memory: 1000M
    requests:
      cpu: 10m
      memory: 50M
  # -- Service settings for Pytorchoperator
  service:
    annotations: {}
    type: ClusterIP
  # -- Annotations for ServiceAccount attached to Pytorchoperator pods
  serviceAccountAnnotations: {}
  # -- Annotations for Pytorchoperator pods
  podAnnotations: {}
  # -- nodeSelector for Pytorchoperator deployment
  nodeSelector: {}
  # -- tolerations for Pytorchoperator deployment
  tolerations: []
  # -- affinity for Pytorchoperator deployment
  affinity: {}

# ----------------------
# Distributed tensorflow training using the TF-Operator
#


# ----------------------
# Training on AWS Sagemaker using AWS Sagemaker operator
#

# ---------------------------
# Flink jobs using the Flink Operator
#
