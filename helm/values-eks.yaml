
#
# FLYTEADMIN
#

flyteadmin:
  replicaCount: 2
  # -- IAM role for SA: https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html
  serviceAccountAnnotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::<ACCOUNT-NUMBER>:role/iam-role-flyte

  resources:
    limits:
      ephemeral-storage: 200Mi
    requests:
      cpu: 50m
      ephemeral-storage: 200Mi
      memory: 200Mi

  service:
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "600"
      # TODO add security groups
      service.beta.kubernetes.io/aws-load-balancer-extra-security-groups: "sg-...,sg-...,sg-..."
      # TODO alter domain
      external-dns.alpha.kubernetes.io/hostname: "flyteadmin.subdomain.mydomain.com"
    type: LoadBalancer
    loadBalancerSourceRanges:
      # TODO change source ip range if desired
      - 0.0.0.0

  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/name: flyteadmin
          topologyKey: kubernetes.io/hostname

#
# DATACATALOG
#

datacatalog:
  replicaCount: 2
  # IAM role for SA: https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html
  serviceAccountAnnotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::<ACCOUNT-NUMBER>:role/iam-role-flyte
  resources:
    limits:
      cpu: 500m
      ephemeral-storage: 200Mi
    requests:
      cpu: 50m
      ephemeral-storage: 200Mi
      memory: 200Mi
  service:
    annotations:
      cloud.google.com/load-balancer-type: Internal
    type: LoadBalancer
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/name: datacatalog
          topologyKey: kubernetes.io/hostname

#
# FLYTEPROPELLER
#

flytepropeller:
  replicaCount: 2
  # IAM role for SA: https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html
  serviceAccountAnnotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::<ACCOUNT-NUMBER>:role/iam-role-flyte
  resources:
    limits:
      cpu: 500m
      ephemeral-storage: 200Mi
      memory: 500Mi
    requests:
      cpu: 50m
      ephemeral-storage: 200Mi
      memory: 200Mi
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/name: flytepropeller
          topologyKey: kubernetes.io/hostname

#
# FLYTECONSOLE
#

flyteconsole:
  replicaCount: 2
  resources:
    limits:
      cpu: 250m
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/name: flyteconsole
          topologyKey: kubernetes.io/hostname

#
# REDIS
#

redis:
  resources:
    requests:
      cpu: 100m
      memory: 250Mi

#
# POSTGRES
#

postgres:
  enabled: false

#
# MINIO
#

minio:
  enabled: false

#
# CONTOUR
#

contour:
  enabled: false



#
# COMMON
#

common:
  ingress:
    host: flyte.example.com
    annotations:
      # -- aws-load-balancer-controller v2.1 or higher is required - https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.1/
      kubernetes.io/ingress.class: alb
      alb.ingress.kubernetes.io/tags: service_instance=production
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
      # -- Instruct ALB Controller to not create multiple load balancers (and hence maintain a single endpoint for both GRPC and Http)
      alb.ingress.kubernetes.io/group.name: flytesystem
      # Replace certificate Arn with one deployed to your EKS cluster. Follow instructions in README.md
      alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-2:111111111111:certificate/e92fefd8-6197-4249-a524-431d611c9af6
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
  databaseSecret:
    name: db-pass
    secretManifest:
      # # Leave it empty if your secret already exists

      # # Else you can create your own secret object: 
      # # Necessary dependencies:
      # # - https://github.com/hashicorp/vault
      # # - https://github.com/godaddy/kubernetes-external-secrets

      # apiVersion: kubernetes-client.io/v1
      # kind: ExternalSecret
      # metadata:
      #   name: db-pass
      #   namespace: flyte
      # spec:
      #   backendType: vault
      #   vaultMountPoint: <MOUNT_PATH>
      #   vaultRole: <VAULT-ROLE>
      #   data:
      #   - name: pass.txt
      #     key: k8s/data/path/to/secret
      #     property: password


# -----------------------------------------------------
# Core dependencies that should be configured for Flyte to work on any platform
# Specifically 2 - Storage (s3, gcs etc), Production RDBMS - Aurora, CloudSQL etc
# ------------------------------------------------------
#
# STORAGE SETTINGS
#

storage:
  # -- Sets the storage type. Supported values are sandbox, s3, gcs and custom.
  type: s3
  # -- bucketName defines the storage bucket flyte will use. Required for all types except for sandbox.
  bucketName: <my-s3-bucket>
  s3:
    region: us-east-1

db:
  database:
    port: 5432
    username: postgres
    host: <DB-NAME>
    dbname: flyte-development
    passwordPath: /etc/db/pass.txt

#
# CONFIGMAPS
#

configmap:
  server:
    server:
      httpPort: 8088
      grpcPort: 8089
      security:
        secure: false
        useAuth: false
        allowCors: true
        allowedOrigins:
          # Accepting all domains for Sandbox installation
          - "*"
        allowedHeaders:
          - "Content-Type"

    task_type_whitelist:
      spark:
        - project: flytetester
        - project: spark-workflows

  task_resource_defaults:
    task_resources:
      defaults:
        cpu: 1000m
        memory: 1000Mi
        storage: 1000Mi
      limits:
        storage: 2000Mi

  core:
    propeller:
      rawoutput-prefix: s3://s3-bucket-for-flyte/
      workers: 40
      gc-interval: 12h
      max-workflow-retries: 50
      kube-client-config:
        qps: 100
        burst: 25
        timeout: 30s
      queue:
        sub-queue:
          type: bucket
          rate: 100
          capacity: 1000

  enabled_plugins:
    tasks:
      task-plugins:
        enabled-plugins:
          - container
          - sidecar
          - spark
          - k8s-array
          - pytorch
        default-for-task-types:
          container: container
          sidecar: sidecar
          spark: spark
          container_array: k8s-array
          pytorch: pytorch

  logger:
    logger:
      level: 5


# ----------------------------------------------------------------
# Optional Modules
# Flyte built extensions that enable various additional features in Flyte.
# All these features are optional, but are critical to run certain features
# ------------------------------------------------------------------------

# --
# Flyte uses a cloud hosted Cron scheduler to run workflows on a schedule. The following module is optional. Without,
# this module, you will not have scheduled launchplans/workflows.
workflow_scheduler:
  enabled: true
  config:
    scheduler:
      eventScheduler:
        scheme: aws
        region: us-east-1
        scheduleRole: arn:aws:iam::<ACCOUNT-NUMBER>:role/flyte_cron_scheduler_role
        targetName: arn:aws:sqs:us-east-1:<ACCOUNT-NUMBER>:flyte-cron-scheduler-queue
        scheduleNamePrefix: flyte
      workflowExecutor:
        scheme: aws
        region: us-east-1
        scheduleQueueName: flyte-cron-scheduler-queue
        accountId: <ACCOUNT-NUMBER>
        reconnectAttempts: 10
        reconnectDelaySeconds: 30


# --
# Workflow notifications module is an optional dependency. Flyte uses cloud native pub-sub systems to notify users of
# various events in their workflows
workflow_notifications:
    enabled: true
    config:
       notifications:
         type: aws
         region: us-east-1
         publisher:
           topicName: arn:aws:sns:us-east-1:<ACCOUNT-NUMBER>:flyte-notifications-topic
         processor:
           queueName: flyte-notifications-queue
           accountId: <ACCOUNT-NUMBER>
         emailer:
           subject: "Flyte: {{ project }}/{{ domain }}/{{ launch_plan.name }} has '{{ phase }}'"
           sender:  "flyte@example.com"
           body: |
             Execution {{ workflow.project }}/{{ workflow.domain }}/{{ workflow.name }}/{{ name }} has {{ phase }}.
             Details: https://flyte.example.com/console/projects/{{ project }}/domains/{{ domain }}/executions/{{ name }}.
             {{ error }}


# -- Configuration for the Cluster resource manager component. This is an optional component, that enables automatic
# cluster configuration. This is useful to set default quotas, manage namespaces etc that map to a project/domain
cluster_resource_manager:
  # -- Enables the Cluster resource manager component
  enabled: true
  templates:
    # -- Template for namespaces resources
    - key: aa_namespace
      value: |
        apiVersion: v1
        kind: Namespace
        metadata:
          name: {{ namespace }}
        spec:
          finalizers:
          - kubernetes

    - key: ab_project_resource_quota
      value: |
        apiVersion: v1
        kind: ResourceQuota
        metadata:
          name: project-quota
          namespace: {{ namespace }}
        spec:
          hard:
            limits.cpu: {{ projectQuotaCpu }}
            limits.memory: {{ projectQuotaMemory }}

    # -- Template for spark role
    - key: ac_project_copilot_dataconfig
      value: |
        kind: ConfigMap
        apiVersion: v1
        metadata:
          name: flyte-data-config
          namespace: {{ namespace }}
        data:
          config.yaml: |
            storage:
              connection:
                access-key: minio
                auth-type: accesskey
                disable-ssl: true
                endpoint: http://minio.flyte.svc.cluster.local:9000
                region: us-east-1
                secret-key: miniostorage
              type: minio
              container: my-s3-bucket
              enable-multicontainer: true

    # -- Template for spark role
    - key: ad_spark_role
      value: |
        apiVersion: rbac.authorization.k8s.io/v1beta1
        kind: Role
        metadata:
          name: spark-role
          namespace: {{ namespace }}
        rules:
        - apiGroups:
          - ""
          resources:
          - pods
          verbs:
          - '*'
        - apiGroups:
          - ""
          resources:
          - services
          verbs:
          - '*'
        - apiGroups:
          - ""
          resources:
          - configmaps
          verbs:
          - '*'

    # -- Template for spark SA
    - key: ae_spark_service_account
      value: |
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: spark
          namespace: {{ namespace }}

    # -- Template for spark role binding
    - key: af_spark_role_binding
      value: |
        apiVersion: rbac.authorization.k8s.io/v1beta1
        kind: RoleBinding
        metadata:
          name: spark-role-binding
          namespace: {{ namespace }}
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          name: spark-role
        subjects:
        - kind: ServiceAccount
          name: spark
          namespace: {{ namespace }}

#
# SPARKOPERATOR
#

sparkoperator:
  enabled: true
  resources:
    limits:
      cpu: 1000m
      memory: 1000Mi
    requests:
      cpu: 50m
      memory: 250Mi

#
# PYTORCHOPERATOR
#

pytorchoperator:
  enabled: true
  resources:
    limits:
      cpu: 1000m
      memory: 1000Mi
    requests:
      cpu: 50m
      memory: 250Mi