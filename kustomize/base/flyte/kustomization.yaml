apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

# Override the namespace
namespace: flyte

# Images that should be used
images:
  # FlyteAdmin
  - name: flyteadmin # match images with this name
    newTag: v0.3.5 # override the tag
    newName: docker.io/lyft/flyteadmin # override the name
  # FlytePropeller
  - name: flytepropeller # match images with this name
    newTag: v0.3.12 # override the tag
    newName: docker.io/lyft/flytepropeller # override the name
  # Flyte DataCatalog
  - name: datacatalog # match images with this name
    newTag: v0.2.2 # override the tag
    newName: docker.io/lyft/datacatalog # override the name
  # FlyteConsole
  - name: flyteconsole # match images with this name
    newTag: v0.11.0 # override the tag
    newName: docker.io/lyft/flyteconsole # override the name

# All the resources that make up the deployment
resources:
# global resources
- ../namespace
- ../ingress
- ./admin/
- ../datacatalog
- ../console
- ../wf_crd
- ../propeller
- ../adminserviceaccount
  ########
  # Operators to be enabled
- ../operators/spark
  #- ../operators/sagemaker
- ../operators/kfoperators/pytorch
  #- ../operators/kfoperators/tensorflow
  ###########
  # Used to store data. In production use hosted SQL Servers - e.g. Postgres (AWS RDS), Aurora postgres (AWS RDS), CLOUDSQL (GCP) etc
- ./dependencies/database
  ##########
  # In local we use minio, but in cloud environment use S3 / GCS / AFS / Oracle Blob store etc
- ./dependencies/storage
  #####
  # This is used for Resource pooling. On cloud you can use hosted redis (e.g. AWS elasticache)
- ./dependencies/redis
  ###### 
  # Contour is used to create ingress. On cloud service use the default provided ingress controllers or cloud LB's
- ./dependencies/contour_ingress_controller
  # Add node ports for ease of use locally
- ./dependencies/nodeport-services.yaml

##############################################  
# Generate Configs
# For each component exactly one config is generated
# For every component required configs are
# 1. logger.yaml
# 2. storage.yaml
# 3. component.yaml
#
# db.yaml is required for FlyteAdmin and DataCatalog
# ############################################
configMapGenerator:
# the main admin configmap
- name: flyte-admin-config
  files:
    - ./config/admin.yaml
    - ./config/db.yaml
    - ./config/storage.yaml
    - ./config/logger.yaml
      
# cluster resource templates
- name: clusterresource-template
  files:
# Files are read in alphabetical order. To ensure that we create the namespace first, prefix the file name with "aa".
    - ./config/clusterresource-templates/aa_namespace.yaml
    - ./config/clusterresource-templates/ab_project-resource-quota.yaml
    - ./config/clusterresource-templates/ac_project-copilot-dataconfig.yaml
    - ./config/clusterresource-templates/ad_spark-role.yaml
    - ./config/clusterresource-templates/ae_spark-service-account.yaml
    - ./config/clusterresource-templates/af_spark-role-binding.yaml

# Flyte Propeller Configuration
- name: flyte-propeller-config
  files:
    - ./config/propeller.yaml
    - ./config/enabled_plugins.yaml
    - ./config/plugins/copilot.yaml
    - ./config/plugins/k8s.yaml
    - ./config/plugins/qubole.yaml
    - ./config/plugins/spark.yaml
    - ./config/plugins/task_logs.yaml
    - ./config/storage.yaml
    - ./config/logger.yaml

# TODO Flyte Console Configuration
#- name: flyte-console-config
#  files:
#    - ./config/console.yaml

- name: datacatalog-config
  files:
    - ./config/datacatalog.yaml
    - ./config/storage.yaml
    - ./config/logger.yaml
